[2016-09-18 13:01:29] INFO  WEBrick 1.3.1
[2016-09-18 13:01:29] INFO  ruby 2.3.1 (2016-04-26) [x86_64-linux]
[2016-09-18 13:01:29] INFO  WEBrick::HTTPServer#start: pid=10105 port=5000
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET / HTTP/1.1" 200 43712 3.2897
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /css/bootstrap.min.css HTTP/1.1" 304 - 0.0010
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /css/bootstrap-responsive.min.css HTTP/1.1" 304 - 0.0008
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /css/main.css HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /img/star.gif HTTP/1.1" 304 - 0.0010
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /js/jquery.min.js HTTP/1.1" 304 - 0.0009
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /js/star.js HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:01:37 +0900] "GET /js/bootstrap.min.js HTTP/1.1" 304 - 0.0007
[34m
[Rack::Lineprof] ===============================================================[0m

lib/isuda/web.rb
[90m               |  39          user_id = session[:user_id]
[0m[90m               |  40          if user_id
[0m[37m   0.3ms     4 |  41            user = db.xquery(%| select name from user where id = ? |, user_id).first
[0m[90m               |  42            @user_id = user_id
[0m[90m               |  43            @user_name = user[:name]
[0m[90m              .......[0m
[90m               |  59              _, _, attrs_part = settings.dsn.split(':', 3)
[0m[90m               |  60              attrs = Hash[attrs_part.split(';').map {|part| part.split('=', 2) }]
[0m[37m   1.5ms     2 |  61              mysql = Mysql2::Client.new(
[0m[90m               |  62                username: settings.db_user,
[0m[90m               |  63                password: settings.db_password,
[0m[90m              .......[0m
[90m               |  95  
[0m[90m               |  96        def htmlify(content)
[0m[31m 410.0ms    20 |  97          keywords = db.xquery(%| select * from entry order by character_length(keyword) desc |)
[0m[31m 2123.5ms 497100 |  98          pattern = keywords.map {|k| Regexp.escape(k[:keyword]) }.join('|')
[0m[90m               |  99          kw2hash = {}
[0m[31m 573.7ms    10 |  100          hashed_content = content.gsub(/(#{pattern})/) {|m|
[0m[90m               |  101            matched_keyword = $1
[0m[37m   2.2ms  1395 |  102            "isuda_#{Digest::SHA1.hexdigest(matched_keyword)}".tap do |hash|
[0m[90m               |  103              kw2hash[matched_keyword] = hash
[0m[90m               |  104            end
[0m[90m               |  105          }
[0m[37m   0.6ms    10 |  106          escaped_content = Rack::Utils.escape_html(hashed_content)
[0m[33m   7.6ms    10 |  107          kw2hash.each do |(keyword, hash)|
[0m[37m   3.9ms   216 |  108            keyword_url = url("/keyword/#{Rack::Utils.escape_path(keyword)}")
[0m[37m   0.7ms   216 |  109            anchor = '<a href="%s">%s</a>' % [keyword_url, Rack::Utils.escape_html(keyword)]
[0m[37m   2.6ms   108 |  110            escaped_content.gsub!(hash, anchor)
[0m[90m               |  111          end
[0m[37m   0.5ms    10 |  112          escaped_content.gsub(/\n/, "<br />\n")
[0m[90m               |  113        end
[0m[90m               |  114  
[0m[90m               |  115        def uri_escape(str)
[0m[37m   0.3ms    10 |  116          Rack::Utils.escape_path(str)
[0m[90m               |  117        end
[0m[90m               |  118  
[0m[90m               |  119        def load_stars(keyword)
[0m[37m   0.7ms    20 |  120          isutar_url = URI(settings.isutar_origin)
[0m[90m               |  121          isutar_url.path = '/stars'
[0m[37m   0.5ms    20 |  122          isutar_url.query = URI.encode_www_form(keyword: keyword)
[0m[33m  19.6ms    10 |  123          body = Net::HTTP.get(isutar_url)
[0m[90m               |  124          stars_res = JSON.parse(body)
[0m[90m               |  125          stars_res['stars']
[0m[90m              .......[0m
[90m               |  141      end
[0m[90m               |  142  
[0m[31m 627.3ms     1 |  143      get '/', set_name: true do
[0m[90m               |  144        per_page = 10
[0m[90m               |  145        page = (params[:page] || 1).to_i
[0m[90m               |  146  
[0m[37m   3.4ms     2 |  147        entries = db.xquery(%|
[0m[90m               |  148          SELECT * FROM entry
[0m[90m               |  149          ORDER BY updated_at DESC
[0m[90m              .......[0m
[90m               |  151          OFFSET #{per_page * (page - 1)}
[0m[90m               |  152        |)
[0m[31m 365.1ms    61 |  153        entries.each do |entry|
[0m[31m 3239.0ms    10 |  154          entry[:html] = htmlify(entry[:description])
[0m[90m               |  155          entry[:stars] = load_stars(entry[:keyword])
[0m[90m               |  156        end
[0m[90m               |  157  
[0m[37m   2.2ms     5 |  158        total_entries = db.xquery(%| SELECT count(*) AS total_entries FROM entry |).first[:total_entries].to_i
[0m[90m               |  159  
[0m[90m               |  160        last_page = (total_entries.to_f / per_page.to_f).ceil
[0m[90m              .......[0m
[90m               |  169          last_page: last_page,
[0m[90m               |  170        }
[0m[37m   4.0ms     1 |  171        erb :index, locals: locals
[0m[90m               |  172      end
[0m[90m               |  173  
[0m
[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m

lib/isuda/web.rb
[90m               |  39          user_id = session[:user_id]
[0m[90m               |  40          if user_id
[0m[37m   0.3ms     4 |  41            user = db.xquery(%| select name from user where id = ? |, user_id).first
[0m[90m               |  42            @user_id = user_id
[0m[90m               |  43            @user_name = user[:name]
[0m[90m              .......[0m
[90m               |  59              _, _, attrs_part = settings.dsn.split(':', 3)
[0m[90m               |  60              attrs = Hash[attrs_part.split(';').map {|part| part.split('=', 2) }]
[0m[37m   0.4ms     2 |  61              mysql = Mysql2::Client.new(
[0m[90m               |  62                username: settings.db_user,
[0m[90m               |  63                password: settings.db_password,
[0m[90m              .......[0m
[90m               |  95  
[0m[90m               |  96        def htmlify(content)
[0m[31m 347.5ms    20 |  97          keywords = db.xquery(%| select * from entry order by character_length(keyword) desc |)
[0m[31m 1990.4ms 497100 |  98          pattern = keywords.map {|k| Regexp.escape(k[:keyword]) }.join('|')
[0m[90m               |  99          kw2hash = {}
[0m[31m 535.4ms    10 |  100          hashed_content = content.gsub(/(#{pattern})/) {|m|
[0m[90m               |  101            matched_keyword = $1
[0m[37m   2.1ms  1395 |  102            "isuda_#{Digest::SHA1.hexdigest(matched_keyword)}".tap do |hash|
[0m[90m               |  103              kw2hash[matched_keyword] = hash
[0m[90m               |  104            end
[0m[90m               |  105          }
[0m[33m   7.9ms    10 |  106          escaped_content = Rack::Utils.escape_html(hashed_content)
[0m[33m   8.8ms    10 |  107          kw2hash.each do |(keyword, hash)|
[0m[33m   5.0ms   216 |  108            keyword_url = url("/keyword/#{Rack::Utils.escape_path(keyword)}")
[0m[37m   0.3ms   216 |  109            anchor = '<a href="%s">%s</a>' % [keyword_url, Rack::Utils.escape_html(keyword)]
[0m[37m   3.0ms   108 |  110            escaped_content.gsub!(hash, anchor)
[0m[90m               |  111          end
[0m[37m   0.5ms    10 |  112          escaped_content.gsub(/\n/, "<br />\n")
[0m[90m               |  113        end
[0m[90m               |  114  
[0m[90m               |  115        def uri_escape(str)
[0m[37m   0.3ms    10 |  116          Rack::Utils.escape_path(str)
[0m[90m               |  117        end
[0m[90m               |  118  
[0m[90m               |  119        def load_stars(keyword)
[0m[37m   1.0ms    20 |  120          isutar_url = URI(settings.isutar_origin)
[0m[90m               |  121          isutar_url.path = '/stars'
[0m[37m   0.5ms    20 |  122          isutar_url.query = URI.encode_www_form(keyword: keyword)
[0m[33m  23.9ms    10 |  123          body = Net::HTTP.get(isutar_url)
[0m[90m               |  124          stars_res = JSON.parse(body)
[0m[90m               |  125          stars_res['stars']
[0m[90m              .......[0m
[90m               |  141      end
[0m[90m               |  142  
[0m[31m 654.2ms     1 |  143      get '/', set_name: true do
[0m[90m               |  144        per_page = 10
[0m[90m               |  145        page = (params[:page] || 1).to_i
[0m[90m               |  146  
[0m[37m   3.1ms     2 |  147        entries = db.xquery(%|
[0m[90m               |  148          SELECT * FROM entry
[0m[90m               |  149          ORDER BY updated_at DESC
[0m[90m              .......[0m
[90m               |  151          OFFSET #{per_page * (page - 1)}
[0m[90m               |  152        |)
[0m[31m 366.4ms    61 |  153        entries.each do |entry|
[0m[31m 3000.8ms    10 |  154          entry[:html] = htmlify(entry[:description])
[0m[90m               |  155          entry[:stars] = load_stars(entry[:keyword])
[0m[90m               |  156        end
[0m[90m               |  157  
[0m[37m   2.5ms     5 |  158        total_entries = db.xquery(%| SELECT count(*) AS total_entries FROM entry |).first[:total_entries].to_i
[0m[90m               |  159  
[0m[90m               |  160        last_page = (total_entries.to_f / per_page.to_f).ceil
[0m[90m              .......[0m
[90m               |  169          last_page: last_page,
[0m[90m               |  170        }
[0m[37m   4.0ms     1 |  171        erb :index, locals: locals
[0m[90m               |  172      end
[0m[90m               |  173  
[0m
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET / HTTP/1.1" 200 43712 3.0417
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /css/bootstrap.min.css HTTP/1.1" 304 - 0.0013
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /css/main.css HTTP/1.1" 304 - 0.0008
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /css/bootstrap-responsive.min.css HTTP/1.1" 304 - 0.0009
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /img/star.gif HTTP/1.1" 304 - 0.0009
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /js/jquery.min.js HTTP/1.1" 304 - 0.0010
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /js/star.js HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:01:46 +0900] "GET /js/bootstrap.min.js HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:02:12 +0900] "GET /keyword/%E7%A6%8F%E5%B2%A1%E5%B8%82%E9%9B%81%E3%81%AE%E5%B7%A3%E3%83%AC%E3%82%AF%E3%83%AA%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%BB%E3%83%B3%E3%82%BF%E3%83%BC%E9%87%8E%E7%90%83%E5%A0%B4 HTTP/1.1" 200 6294 0.3512
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /keyword/%E7%A6%8F%E5%B2%A1%E5%B8%82%E9%9B%81%E3%81%AE%E5%B7%A3%E3%83%AC%E3%82%AF%E3%83%AA%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%BB%E3%83%B3%E3%82%BF%E3%83%BC%E9%87%8E%E7%90%83%E5%A0%B4 HTTP/1.1" 200 6294 0.2933
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /css/bootstrap.min.css HTTP/1.1" 304 - 0.0009
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /css/bootstrap-responsive.min.css HTTP/1.1" 304 - 0.0006
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /css/main.css HTTP/1.1" 304 - 0.0006
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /js/jquery.min.js HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /js/bootstrap.min.js HTTP/1.1" 304 - 0.0006
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /js/star.js HTTP/1.1" 304 - 0.0007
219.75.140.18 - - [18/Sep/2016:13:02:34 +0900] "GET /img/star.gif HTTP/1.1" 304 - 0.0007
[2016-09-18 13:03:05] INFO  going to shutdown ...
[2016-09-18 13:03:05] INFO  WEBrick::HTTPServer#start done.
[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m

lib/isuda/web.rb
[90m               |  39          user_id = session[:user_id]
[0m[90m               |  40          if user_id
[0m[37m   0.2ms     4 |  41            user = db.xquery(%| select name from user where id = ? |, user_id).first
[0m[90m               |  42            @user_id = user_id
[0m[90m               |  43            @user_name = user[:name]
[0m[90m              .......[0m
[90m               |  59              _, _, attrs_part = settings.dsn.split(':', 3)
[0m[90m               |  60              attrs = Hash[attrs_part.split(';').map {|part| part.split('=', 2) }]
[0m[37m   0.5ms     2 |  61              mysql = Mysql2::Client.new(
[0m[90m               |  62                username: settings.db_user,
[0m[90m               |  63                password: settings.db_password,
[0m[90m              .......[0m
[90m               |  95  
[0m[90m               |  96        def htmlify(content)
[0m[33m  40.7ms     2 |  97          keywords = db.xquery(%| select * from entry order by character_length(keyword) desc |)
[0m[31m 205.1ms 49710 |  98          pattern = keywords.map {|k| Regexp.escape(k[:keyword]) }.join('|')
[0m[90m               |  99          kw2hash = {}
[0m[31m  82.7ms     1 |  100          hashed_content = content.gsub(/(#{pattern})/) {|m|
[0m[90m               |  101            matched_keyword = $1
[0m[90m               |  102            "isuda_#{Digest::SHA1.hexdigest(matched_keyword)}".tap do |hash|
[0m[90m              .......[0m
[90m               |  105          }
[0m[90m               |  106          escaped_content = Rack::Utils.escape_html(hashed_content)
[0m[37m   0.6ms     1 |  107          kw2hash.each do |(keyword, hash)|
[0m[37m   0.3ms    16 |  108            keyword_url = url("/keyword/#{Rack::Utils.escape_path(keyword)}")
[0m[90m               |  109            anchor = '<a href="%s">%s</a>' % [keyword_url, Rack::Utils.escape_html(keyword)]
[0m[90m               |  110            escaped_content.gsub!(hash, anchor)
[0m[90m              .......[0m
[90m               |  121          isutar_url.path = '/stars'
[0m[90m               |  122          isutar_url.query = URI.encode_www_form(keyword: keyword)
[0m[37m   1.8ms     1 |  123          body = Net::HTTP.get(isutar_url)
[0m[90m               |  124          stars_res = JSON.parse(body)
[0m[90m               |  125          stars_res['stars']
[0m[90m              .......[0m
[90m               |  231      end
[0m[90m               |  232  
[0m[37m   2.2ms     1 |  233      get '/keyword/:keyword', set_name: true do
[0m[90m               |  234        keyword = params[:keyword] or halt(400)
[0m[90m               |  235  
[0m[37m   0.3ms    10 |  236        entry = db.xquery(%| select * from entry where keyword = ? |, keyword).first or halt(404)
[0m[90m               |  237        entry[:stars] = load_stars(entry[:keyword])
[0m[31m 341.1ms     1 |  238        entry[:html] = htmlify(entry[:description])
[0m[90m               |  239  
[0m[90m               |  240        locals = {
[0m[90m               |  241          entry: entry,
[0m[90m               |  242        }
[0m[37m   2.8ms     1 |  243        erb :keyword, locals: locals
[0m[90m               |  244      end
[0m[90m               |  245  
[0m
[34m
[Rack::Lineprof] ===============================================================[0m

lib/isuda/web.rb
[90m               |  39          user_id = session[:user_id]
[0m[90m               |  40          if user_id
[0m[37m   0.3ms     4 |  41            user = db.xquery(%| select name from user where id = ? |, user_id).first
[0m[90m               |  42            @user_id = user_id
[0m[90m               |  43            @user_name = user[:name]
[0m[90m              .......[0m
[90m               |  59              _, _, attrs_part = settings.dsn.split(':', 3)
[0m[90m               |  60              attrs = Hash[attrs_part.split(';').map {|part| part.split('=', 2) }]
[0m[37m   0.4ms     2 |  61              mysql = Mysql2::Client.new(
[0m[90m               |  62                username: settings.db_user,
[0m[90m               |  63                password: settings.db_password,
[0m[90m              .......[0m
[90m               |  95  
[0m[90m               |  96        def htmlify(content)
[0m[33m  36.9ms     2 |  97          keywords = db.xquery(%| select * from entry order by character_length(keyword) desc |)
[0m[31m 173.6ms 49710 |  98          pattern = keywords.map {|k| Regexp.escape(k[:keyword]) }.join('|')
[0m[90m               |  99          kw2hash = {}
[0m[31m  60.5ms     1 |  100          hashed_content = content.gsub(/(#{pattern})/) {|m|
[0m[90m               |  101            matched_keyword = $1
[0m[90m               |  102            "isuda_#{Digest::SHA1.hexdigest(matched_keyword)}".tap do |hash|
[0m[90m              .......[0m
[90m               |  105          }
[0m[90m               |  106          escaped_content = Rack::Utils.escape_html(hashed_content)
[0m[37m   0.4ms     1 |  107          kw2hash.each do |(keyword, hash)|
[0m[37m   0.2ms    16 |  108            keyword_url = url("/keyword/#{Rack::Utils.escape_path(keyword)}")
[0m[90m               |  109            anchor = '<a href="%s">%s</a>' % [keyword_url, Rack::Utils.escape_html(keyword)]
[0m[90m               |  110            escaped_content.gsub!(hash, anchor)
[0m[90m              .......[0m
[90m               |  121          isutar_url.path = '/stars'
[0m[90m               |  122          isutar_url.query = URI.encode_www_form(keyword: keyword)
[0m[37m   4.9ms     1 |  123          body = Net::HTTP.get(isutar_url)
[0m[90m               |  124          stars_res = JSON.parse(body)
[0m[90m               |  125          stars_res['stars']
[0m[90m              .......[0m
[90m               |  231      end
[0m[90m               |  232  
[0m[33m   5.3ms     1 |  233      get '/keyword/:keyword', set_name: true do
[0m[90m               |  234        keyword = params[:keyword] or halt(400)
[0m[90m               |  235  
[0m[37m   0.2ms    10 |  236        entry = db.xquery(%| select * from entry where keyword = ? |, keyword).first or halt(404)
[0m[90m               |  237        entry[:stars] = load_stars(entry[:keyword])
[0m[31m 281.7ms     1 |  238        entry[:html] = htmlify(entry[:description])
[0m[90m               |  239  
[0m[90m               |  240        locals = {
[0m[90m               |  241          entry: entry,
[0m[90m               |  242        }
[0m[37m   2.5ms     1 |  243        erb :keyword, locals: locals
[0m[90m               |  244      end
[0m[90m               |  245  
[0m
[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


[34m
[Rack::Lineprof] ===============================================================[0m


